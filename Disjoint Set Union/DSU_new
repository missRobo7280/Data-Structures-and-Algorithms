//Disjoint Set Union
#include<bits/stdc++.h>
using namespace std;
class DSU
{
    public:
    vector<int>parent,rank;
    DSU(int n)
    {
        parent.resize(n+1);
        rank.resize(n+1,0);
        iota(parent.begin(),parent.end(),0);

    }
    int find(int x)
    {
        if(parent[x]==x)
        return x;
        //return find(parent[i]); normal dsy without path compression
        return parent[x]=find(parent[x]);// this is with path compression

    }
    void unionSet(int x,int y)
    {
        int x_parent=find(x);
        int y_parent=find(y);
        if(x_parent==y_parent)
        return;
        if(rank[x]<rank[y])
        {
            parent[x_parent]=y_parent;
        }
        else if(rank[x]>rank[y])
        {
            parent[y_parent]=x_parent;
        }
        else
        {
            parent[y_parent]=x_parent;
            rank[y]++;
        }
    }

    bool sameSet(int x,int y)
    {
        if(find(x)==find(y))
        return true;
        else
        return false;
    }
};
int main()
{
    int n;cin>>n;
    DSU dsu(n);
    dsu.unionSet(1,2);
    dsu.unionSet(3,4);
    dsu.unionSet(4,6);
    dsu.unionSet(6,7);
    dsu.unionSet(3,9);
    dsu.unionSet(9,1);
    if(dsu.sameSet(2,6))
    cout<<"YES"<<endl;
    else cout<<"NO"<<endl;
    if(dsu.sameSet(8,3))
    cout<<"YES"<<"\n";
    else
    cout<<"NO"<<"\n";
}
