//finding the valid path with required sum in the given 2-D array
//point to be noted : whenever you have sum problem instead of taking an extra variable to store the changing sum rather go on decreasing the value of k and check if
//reaches 0 ;when it reaches 0 it means the sum uptill now is equal to k
#include<bits/stdc++.h>
using namespace std;
int dp[101][101][101];
int fun(int i,int j,int k,int n,vector<vector<int>> & a)
{
    if(k<0)return 0;
    if(i==n && j==n)
    {
        if(k-a[i][j]==0)return 1;
        else
        return 0;
    }
    if(i>=n || j>=n)
    return 0;
    if(dp[i][j][k]!=-1)
    return dp[i][j][k];
    //recursive case
    int right=0;
    int down=0;
    right=fun(i,j+1,k-a[i][j],n,a);
    down=fun(i+1,j,k-a[i][j],n,a);

    return dp[i][j][k]=right+down;


}
long long numberOfPath(int n,int k,vector<vector<int>> &arr)
{
    memset(dp,-1,sizeof(dp));
    return fun(0,0,k,n,arr);
}
int main()
{
    int n, k;
    cin >> n >> k;
    vector<vector<int>> arr(n, vector<int>(n));
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            cin >> arr[i][j]; 
        }
    }
    cout << numberOfPath(n, k, arr);
    return 0;
}
